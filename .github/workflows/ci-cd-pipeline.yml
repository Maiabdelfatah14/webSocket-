name: CI/CD Pipeline

on:
  push:
    branches:
      - main  
    paths-ignore:
      - 'helm/**'    
      - 'argocd/**'   
      - '.github/workflows/azure-monitor.yml'

permissions:  
  id-token: write 
  contents: read
      
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 🔹 تسجيل الدخول إلى Azure باستخدام Service Principal
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # 🔹 إنشاء Key Vault إذا لم يكن موجودًا
      - name: Create Key Vault if not exists
        run: |
          if ! az keyvault show --name KeyVaultSC23 --resource-group myResourceGroupTR &>/dev/null; then
            az keyvault create --name KeyVaultSC23 --resource-group myResourceGroupTR --location "West Europe" --sku standard
          fi

        # 🔹 الحصول على Object ID لـ Service Principal
      - name: Get Service Principal Object ID
        id: get-sp-object-id
        run: |
          SP_ID=$(az ad sp show --id ${{ secrets.AZURE_CLIENT_ID }} --query id -o tsv)
          echo "SP_ID=$SP_ID" >> $GITHUB_ENV

     # 🔹 إضافة الأسرار إلى Key Vault باستخدام Secrets من GitHub Actions
      - name: Add secrets to Key Vault
        run: |
          az keyvault secret set --vault-name KeyVaultSC23 --name DOCKER-USERNAME --value "${{ secrets.DOCKER_USERNAME }}"
          az keyvault secret set --vault-name KeyVaultSC23 --name DOCKER-PASSWORD --value "${{ secrets.DOCKER_PASSWORD }}"
          az keyvault secret set --vault-name KeyVaultSC23 --name ACR-USERNAME --value "${{ secrets.ACR_USERNAMETR }}"
          az keyvault secret set --vault-name KeyVaultSC23 --name ACR-PASSWORD --value "${{ secrets.ACR_PASSWORDTR }}"


      # 🔹 منح GitHub Actions صلاحيات الوصول إلى Key Vault باستخدام RBAC
      - name: Assign Key Vault Secrets Officer Role
        run: |
          az role assignment create --assignee $SP_ID --role "Key Vault Secrets Officer" \
          --scope /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/myResourceGroupTR/providers/Microsoft.KeyVault/vaults/KeyVaultSC23




      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
       

 # 🔹 Log in to Azure
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} 

          
        # get secrets from key vault 
      - name: Get secrets from Azure Key Vault
        id: get-secrets
        run: |
          echo "DOCKER_USERNAME=$(az keyvault secret show --name DOCKER-USERNAME --vault-name KeyVaultSC23 --query value -o tsv)" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=$(az keyvault secret show --name DOCKER-PASSWORD --vault-name KeyVaultSC23 --query value -o tsv)" >> $GITHUB_ENV
          echo "ACR_USERNAME=$(az keyvault secret show --name ACR-USERNAME --vault-name KeyVaultSC23 --query value -o tsv)" >> $GITHUB_ENV
          echo "ACR_PASSWORD=$(az keyvault secret show --name ACR-PASSWORD --vault-name KeyVaultSC23 --query value -o tsv)" >> $GITHUB_ENV

       # test 
      - name: Debug Key Vault Secrets
        run: |
          echo "DOCKER_USERNAME: $DOCKER_USERNAME"
          echo "DOCKER_PASSWORD: $DOCKER_PASSWORD"



     #🔹 Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          #username: ${{ secrets.DOCKER_USERNAME }}
          #password: ${{ secrets.DOCKER_PASSWORD }}
           username: ${{ env.DOCKER_USERNAME }}
           password: ${{ env.DOCKER_PASSWORD }}


      # 🔹 Build and push Docker image to DockerHub
      - name: Build and push Docker image to DockerHub
        run: |
          docker build -t maiabdelfata7/fastapi-websocket .
          docker push maiabdelfata7/fastapi-websocket

       
        
      # 🔹 Log in to Azure Container Registry (ACR)
      - name: Log in to ACR
        #run: echo ${{ secrets.ACR_PASSWORDTR }} | docker login myacrTR202.azurecr.io -u ${{ secrets.ACR_USERNAMETR }} --password-stdin
        run: echo ${{ env.ACR_PASSWORD }} | docker login myacrTR202.azurecr.io -u ${{ env.ACR_USERNAME }} --password-stdin


       
      # 🔹 Build and push Docker image to ACR
      - name: Build and push Docker image to ACR
        run: |
          docker build -t myacrTR202.azurecr.io/fastapi-websocket:latest .
          docker push myacrTR202.azurecr.io/fastapi-websocket:latest

        # trivyyyy
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
            image-ref: "maiabdelfata7/fastapi-websocket:latest"
            format: "table"
            exit-code: 1
            severity: "CRITICAL,HIGH"



  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 🔹 Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest


      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} 


      # 🔹 Ensure Resource Group & ACR exist
      - name: Ensure Resource Group & ACR exist
        run: |
          az group show --name myResourceGroupTR || az group create --name myResourceGroupTR --location "West Europe"
          az acr show --name myacrTR202 || az acr create --resource-group myResourceGroupTR --name myacrTR202 --sku Basic

      # 🔹 Initialize and apply Terraform configuration
      - name: Terraform init and apply
        working-directory: terraform
        run: |
          terraform init
          terraform apply -auto-approve -var "Subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      # 🔹 Deploy the containerized application to Azure App Service
      - name: Deploy Web App on Azure App Service
        run: |
          az webapp config container set \
            --name my-fastapi-websocket-app \
            --resource-group myResourceGroupTR \
            --docker-custom-image-name myacrTR202.azurecr.io/fastapi-websocket:latest \
            --docker-registry-server-url https://myacrTR202.azurecr.io \
            --docker-registry-server-user ${{ secrets.ACR_USERNAMETR }} \
            --docker-registry-server-password ${{ secrets.ACR_PASSWORDTR }}

      # 🔹 Enable Health Check for App Service
      - name: Enable Health Check
        run: |
          az webapp config set \
            --resource-group myResourceGroupTR \
            --name my-fastapi-websocket-app \
            --generic-configurations "{'healthCheckPath':'/'}"

      # 🔹 Enable Application Insights
      - name: Enable Application Insights
        run: |
          az monitor app-insights component create \
            --app my-fastapi-websocket-app-insights \
            --location "West Europe" \
            --resource-group myResourceGroupTR \
            --kind web \
            --application-type web

      # 🔹 Enable Auto-Restart on Failure
      - name: Enable Auto-Restart on Failure
        run: |
          az webapp config set \
            --resource-group myResourceGroupTR \
            --name my-fastapi-websocket-app \
            --always-on true

   # 🔹 Configure Auto-Scaling for WebSocket connections
      - name: Configure Auto-Scaling for WebSocket connections
        run: |
          az appservice plan update \
            --name myAppServicePlan \
            --resource-group myResourceGroupTR \
            --sku S1
      
          az monitor autoscale create \
            --resource-group myResourceGroupTR \
            --name websocket-autoscale \
            --resource "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/myResourceGroupTR/providers/Microsoft.Web/serverfarms/myAppServicePlan" \
            --min-count 1 \
            --max-count 5 \
            --count 2
      
          az monitor autoscale rule create \
            --resource-group myResourceGroupTR \
            --autoscale-name websocket-autoscale \
            --condition "CpuPercentage > 70 avg 5m" \
            --scale out 1 
          
          az monitor autoscale rule create \
            --resource-group myResourceGroupTR \
            --autoscale-name websocket-autoscale \
            --condition "CpuPercentage < 30 avg 5m" \
            --scale in 1

      

      
