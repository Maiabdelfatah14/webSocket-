name: CI/CD Pipeline
on:
  push:
    branches:
      - main  
    paths-ignore:
      - 'helm/**'    
      - 'argocd/**'   
      - '.github/workflows/azure-monitor.yml'

permissions:  
  id-token: write 
  contents: read
      
jobs:
   # infrastructure:
   #  runs-on: ubuntu-latest
   #  steps:
   #     - name: Checkout code
   #       uses: actions/checkout@v4

   #     - name: Azure Login
   #       uses: azure/login@v1
   #       with:
   #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
   #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
   #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

   #     - name: Set up Terraform
   #       uses: hashicorp/setup-terraform@v2
   #       with:
   #         terraform_version: latest

   #     - name: Terraform Init
   #       working-directory: terraform
   #       run: terraform init

   #     - name: Terraform Apply
   #       working-directory: terraform
   #       run: terraform apply -auto-approve -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

#--------------------------------------------------------------------------------------------- first job -----------------------------
  # secrets-management:
  #   runs-on: ubuntu-latest
  #   #needs: infrastructure
  #   steps:
  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  #     - name: Azure Login to service principal
  #       run: |
  #         az login --service-principal \
  #           -u ${{ secrets.AZURE_CLIENT_ID }} \
  #           -p ${{ secrets.AZURE_CLIENT_SECRET }} \
  #           --tenant ${{ secrets.AZURE_TENANT_ID }}

  #     - name: Show Account Info
  #       run: |
  #         az account show --query "user.name"

  #     - name: Create Key Vault if not exists
  #       run: |
  #         if ! az keyvault show --name KeyVaultSC23 --resource-group myResourceGroupTR &>/dev/null; then
  #           az keyvault create --name KeyVaultSC23 --resource-group myResourceGroupTR --location "West Europe" --sku standard
  #         fi

  #     - name: Get Service Principal Object ID
  #       id: get-sp-object-id
  #       run: |
  #         SP_ID=$(az ad sp show --id ${{ secrets.AZURE_CLIENT_ID }} --query id -o tsv)
  #         if [[ -z "$SP_ID" ]]; then
  #         echo "Error: Could not retrieve Service Principal ID"
  #         exit 1
  #         fi
  #          echo "SP_ID=$SP_ID" >> $GITHUB_ENV

  #     - name: Assign Key Vault Secrets Officer Role
  #       run: |
  #         az role assignment create --assignee $SP_ID --role "Key Vault Secrets Officer" \
  #         --scope /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/myResourceGroupTR/providers/Microsoft.KeyVault/vaults/KeyVaultSC23

  #     - name: Assign Key Vault Administrator Role
  #       run: |
  #         az role assignment create \
  #           --assignee  $SP_ID \
  #           --role "Key Vault Administrator" \
  #           --scope /subscriptions/2204702f-2344-4ad7-acc5-63b9daea47de/resourceGroups/myresourcegrouptr/providers/Microsoft.KeyVault/vaults/KeyVaultSC23
  
  #     - name: Wait for role assignment propagation
  #       run: |
  #         echo "Waiting for role assignment to propagate..."
  #         for i in {1..90}; do
  #         if az role assignment list --assignee $SP_ID --scope /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/myResourceGroupTR/providers/Microsoft.KeyVault/vaults/KeyVaultSC23 | grep -q "Key Vault Secrets Officer"; then
  #           echo "Role assignment successful"
  #           break
  #         fi
  #         sleep 90
  #         done

  #     - name: Verify Role Assignment
  #       run: |
  #         az role assignment list --assignee $SP_ID --scope /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/myResourceGroupTR/providers/Microsoft.KeyVault/vaults/KeyVaultSC23
 
    
  #     - name: Add secrets to Key Vault
  #       run: |
  #         echo "üîπ Checking and adding secrets to Azure Key Vault..."
      
  #         # ACR-USERNAME
  #         if ! az keyvault secret show --vault-name KeyVaultSC23 --name ACR-USERNAME >/dev/null 2>&1; then
  #           az keyvault secret set --vault-name KeyVaultSC23 --name ACR-USERNAME --value "${{ secrets.ACR_USERNAMETR }}"
  #           echo "‚úÖ ACR-USERNAME added."
  #         else
  #           echo "‚ö†Ô∏è ACR-USERNAME already exists."
  #         fi
      
  #         # ACR-PASSWORD
  #         if ! az keyvault secret show --vault-name KeyVaultSC23 --name ACR-PASSWORD >/dev/null 2>&1; then
  #           az keyvault secret set --vault-name KeyVaultSC23 --name ACR-PASSWORD --value "${{ secrets.ACR_PASSWORDTR }}"
  #           echo "‚úÖ ACR-PASSWORD added."
  #         else
  #           echo "‚ö†Ô∏è ACR-PASSWORD already exists."
  #         fi
      
  #     - name: Retrieve and Display Stored Secrets
  #       run: |
  #         echo "üîπ Retrieving stored secrets..."
      
  #         ACR_USERNAME=$(az keyvault secret show --vault-name KeyVaultSC23 --name ACR-USERNAME --query value -o tsv)
  #         ACR_PASSWORD=$(az keyvault secret show --vault-name KeyVaultSC23 --name ACR-PASSWORD --query value -o tsv)
      
  #         echo "üîπ Stored Secrets:"
  #         echo "ACR-USERNAME: ${ACR_USERNAME:0:3}***"  # ÿ•ÿ∏Ÿáÿßÿ± ÿ£ŸàŸÑ 3 ÿ£ÿ≠ÿ±ŸÅ ŸÅŸÇÿ∑
  #         echo "ACR-PASSWORD: ${ACR_PASSWORD:0:3}***"  
      
  #         # ÿ≠ŸÅÿ∏ ÿßŸÑŸÇŸäŸÖ ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖŸáÿß ŸÅŸä ÿßŸÑÿÆÿ∑Ÿàÿßÿ™ ÿßŸÑŸÇÿßÿØŸÖÿ© ÿØŸàŸÜ ÿ∑ÿ®ÿßÿπÿ™Ÿáÿß
  #         echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
  #         echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV




        # build:
        #    runs-on: ubuntu-latest
        #   # needs: secrets-management  # ŸÇŸÖ ÿ®ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑÿ™ÿπŸÑŸäŸÇ ÿ•ÿ∞ÿß ŸÉŸÜÿ™ ÿ™ÿ≠ÿ™ÿßÿ¨ ÿ™ÿ¥ÿ∫ŸäŸÑ job ÿßŸÑÿ£ÿ≥ÿ±ÿßÿ± ÿ£ŸàŸÑÿßŸã
        #    steps:
        #     - name: Checkout code
        #       uses: actions/checkout@v4
        
        #     - name: Azure Login
        #       uses: azure/login@v1
        #       with:
        #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
        #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
        #     - name: Set up Docker Buildx
        #       uses: docker/setup-buildx-action@v3
        
        #     - name: Get secrets from Azure Key Vault
        #       id: get-secrets
        #       run: |
        #         ACR_USERNAME=$(az keyvault secret show --name ACR-USERNAME --vault-name KeyVaultSC23 --query value -o tsv)
        #         ACR_PASSWORD=$(az keyvault secret show --name ACR-PASSWORD --vault-name KeyVaultSC23 --query value -o tsv)
        
        #         if [[ -z "$ACR_USERNAME" || -z "$ACR_PASSWORD" ]]; then
        #           echo "‚ùå ÿÆÿ∑ÿ£: ŸÑŸÖ Ÿäÿ™ŸÖ ÿßÿ≥ÿ™ÿ±ÿ¨ÿßÿπ ÿßŸÑÿ£ÿ≥ÿ±ÿßÿ± ŸÖŸÜ Azure Key Vault"
        #           exit 1
        #         fi
        
        #         echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
        #         echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV
        
        #     - name: Log in to ACR using Azure CLI
        #       run: az acr login --name $ACR_USERNAME
        #       env:
        #           ACR_USERNAME: ${{ env.ACR_USERNAME }}



        #     - name: Assign Azure Roles
        #       run: |
        #         az role assignment create --assignee ${{ secrets.AZURE_CLIENT_ID }} \
        #           --role "User Access Administrator" \
        #           --scope /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}
                
        #         az role assignment create --assignee ${{ secrets.AZURE_CLIENT_ID }} \
        #           --role "AcrPush" \
        #           --scope /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/myResourceGroupTR/providers/Microsoft.ContainerRegistry/registries/myacrTR202


        #     - name: Azure Login
        #       uses: azure/login@v1
        #       with:
        #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
        #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  
        #     # üîπ Log in to DockerHub
        #     - name: Log in to DockerHub
        #       uses: docker/login-action@v3
        #       with:
        #            username: ${{ secrets.DOCKER_USERNAME }}
        #            password: ${{ secrets.DOCKER_PASSWORD }}
         
        #        # üîπ Build and push Docker image to DockerHub
        #     - name: Build and push Docker image to DockerHub
        #       run: |
        #            docker build -t maiabdelfata7/fastapi-websocket .
        #            docker push maiabdelfata7/fastapi-websocket
                   
        #     # # üîπ ÿ≥ÿ≠ÿ® ÿßŸÑÿµŸàÿ±ÿ© ŸÖŸÜ DockerHub
        #     # - name: Pull Docker image from DockerHub
        #     #   run: docker pull maiabdelfata7/fastapi-websocket:latest

 
        #     - name: Log in to ACR using Docker
        #       run: |
        #           ACR_PASSWORD=$(az acr credential show --name ${{ env.ACR_USERNAME }} --query "passwords[0].value" -o tsv)
        #           echo $ACR_PASSWORD | docker login myacrTR202.azurecr.io -u ${{ env.ACR_USERNAME }} --password-stdin
 
        #    # üîπ Build and push Docker image to ACR
        #     - name: Build and push Docker image to ACR
        #       run: |
        #          docker build -t myacrTR202.azurecr.io/fastapi-websocket:latest .
        #          docker push myacrTR202.azurecr.io/fastapi-websocket:latest

        #     # # üîπ ÿ•ÿπÿßÿØÿ© Ÿàÿ≥ŸÖ (Tag) ÿßŸÑÿµŸàÿ±ÿ© ŸÑŸÄ ACR
        #     # - name: Tag image for ACR
        #     #   run: docker tag maiabdelfata7/fastapi-websocket:latest myacrTR202.azurecr.io/fastapi-websocket:latest

        #     # # üîπ ÿØŸÅÿπ ÿßŸÑÿµŸàÿ±ÿ© ÿ•ŸÑŸâ ACR
        #     # - name: Push Docker image to ACR
        #     #   run: docker push myacrTR202.azurecr.io/fastapi-websocket:latest

        
        #     - name: Run Trivy vulnerability scanner
        #       uses: aquasecurity/trivy-action@master
        #       with:
        #         image-ref: "${{ env.ACR_USERNAME }}.azurecr.io/fastapi-websocket:latest"
        #         format: "table"
        #         exit-code: 0  
        #         severity: "CRITICAL,HIGH"
      
     
    
        deploy:
                runs-on: ubuntu-latest
                # needs: build
                steps:
                  - name: Checkout code
                    uses: actions/checkout@v4
            
                  - name: Log in to Azure
                    uses: azure/login@v1
                    with:
                      client-id: ${{ secrets.AZURE_CLIENT_ID }}
                      tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                      subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      
      #---------------------------------------------------------------- trivy  befor deployment -----------------------------------------
                  - name: Run Trivy Scan (Allow Failures)
                    run: |
                      docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                        aquasec/trivy image --exit-code 0 --severity HIGH,CRITICAL \
                        myacrTR202.azurecr.io/fastapi-websocket:latest | tee trivy-report.txt
            
                  - name: Upload Trivy Scan Report
                    uses: actions/upload-artifact@v4
                    with:
                      name: trivy-scan-report
                      path: trivy-report.txt
          
          #----------------------------------------------------------------------------- deploy ---------------------------------------------

                  - name: Log in to ACR using Docker
                    run: |
                        ACR_PASSWORD=$(az acr credential show --name ${{ env.ACR_USERNAME }} --query "passwords[0].value" -o tsv)
                        echo $ACR_PASSWORD | docker login myacrTR202.azurecr.io -u ${{ env.ACR_USERNAME }} --password-stdin
                  
                  - name: Deploy Web App on Azure App Service
                    run: |
                      az webapp config container set \
                        --name my-fastapi-websocket-app \
                        --resource-group myResourceGroupTR \
                        --container-image-name myacrTR202.azurecr.io/fastapi-websocket:latest \
                        --container-registry-url https://myacrTR202.azurecr.io \
                        --container-registry-username ${{ env.ACR_USERNAME }} \
                        --container-registry-password ${{ env.ACR_PASSWORD }}
    

                  - name: Restart App Service
                    run: az webapp restart --name my-fastapi-websocket-app --resource-group myResourceGroupTR
            
                  # - name: Enable Health Check
                  #   run: |
                  #     az webapp config set --resource-group myResourceGroupTR --name my-fastapi-websocket-app --generic-configurations "{'healthCheckPath':'/'}"
            
                  - name: Enable Auto-Restart on Failure
                    run: |
                      az webapp config set --resource-group myResourceGroupTR --name my-fastapi-websocket-app --always-on true
            
                  - name: Configure Auto-Scaling
                    run: |
                      az appservice plan update --name myAppServicePlan --resource-group myResourceGroupTR --sku S1
            
