name: CI/CD Pipeline

on:
  push:
    branches:
      - main  

permissions:  
  id-token: write 
  contents: read
      
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image to DockerHub
        run: |
          docker build -t maiabdelfata7/fastapi-websocket .
          docker push maiabdelfata7/fastapi-websocket

      - name: Log in to Azure Container Registry
        run: echo ${{ secrets.ACR_PASSWORDTR }} | docker login myacrTR202.azurecr.io -u ${{ secrets.ACR_USERNAMETR }} --password-stdin

      - name: Build and push Docker image to ACR
        run: |
          docker build -t myacrTR202.azurecr.io/fastapi-websocket:latest .
          docker push myacrTR202.azurecr.io/fastapi-websocket:latest

  deploy:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          allow-no-subscriptions: false
          auth-type: SERVICE_PRINCIPAL

      - name: Check if Resource Group & ACR exist
        run: |
          az group show --name myResourceGroupTR || az group create --name myResourceGroupTR --location "West Europe"
          az acr show --name myacrTR202 || az acr create --resource-group myResourceGroupTR --name myacrTR202 --sku Basic

      - name: Terraform init and apply
        working-directory: terraform
        run: |
            terraform init
            terraform apply -auto-approve -var "Subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Deploy Web App on Azure App Service
        run: |
          az webapp config container set \
            --name my-fastapi-websocket-app \
            --resource-group myResourceGroupTR \
            --docker-custom-image-name myacrTR202.azurecr.io/fastapi-websocket:latest \
            --docker-registry-server-url https://myacrTR202.azurecr.io \
            --docker-registry-server-user ${{ secrets.ACR_USERNAMETR }} \
            --docker-registry-server-password ${{ secrets.ACR_PASSWORDTR }}

      - name: Get AKS Credentials
        run: az aks get-credentials --resource-group AKCHELM --name my-aks-clusterHELM

      - name: Install Helm
        run: |
         curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Log in to ACR for Helm Deployment
        run: |
          echo "${ACR_PASSWORDHELM}" | docker login myacrhelm.azurecr.io -u "${ACR_USERNAMEHELM}" --password-stdin
        env:
          ACR_USERNAMEHELM: ${{ secrets.ACR_USERNAMEHELM }}
          ACR_PASSWORDHELM: ${{ secrets.ACR_PASSWORDHELM }}

      - name: Build and push Docker image to ACR (Helm)
        run: |
           docker build -t myacrhelm.azurecr.io/fastapi-websocket:latest .
           docker push myacrhelm.azurecr.io/fastapi-websocket:latest
        env:
          ACR_USERNAMEHELM: ${{ secrets.ACR_USERNAMEHELM }}
          ACR_PASSWORDHELM: ${{ secrets.ACR_PASSWORDHELM }}

      - name: Create Kubernetes Secret for ACR
        run: |
          kubectl create secret docker-registry acr-secret \
            --namespace default \
            --docker-server=myacrhelm.azurecr.io \
            --docker-username="${ACR_USERNAMEHELM}" \
            --docker-password="${ACR_PASSWORDHELM}" \
            --dry-run=client -o yaml | kubectl apply -f -
        env:
          ACR_USERNAMEHELM: ${{ secrets.ACR_USERNAMEHELM }}
          ACR_PASSWORDHELM: ${{ secrets.ACR_PASSWORDHELM }}

      - name: Deploy using Helm
        run: |
          helm upgrade --install websocket-app ./helm \
            --namespace default \
            --set image.repository=myacrHELM.azurecr.io/fastapi-websocket \
            --set image.tag=latest \
            --set image.pullSecrets[0]=acr-secret










      - name: Ensure ArgoCD is Installed & Service is LoadBalancer
        run: |
          kubectl create namespace argocd || echo "Namespace already exists"
          if ! kubectl get svc argocd-server -n argocd > /dev/null 2>&1; then
            echo "Installing ArgoCD..."
            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
            sleep 30  # انتظار حتى يتم نشر الخدمات
          fi
          echo "Ensuring ArgoCD Service is LoadBalancer..."
          kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

      - name: Wait for LoadBalancer External IP
        run: |
          echo "Waiting for ArgoCD External IP..."
          for i in {1..30}; do
            EXTERNAL_IP=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$EXTERNAL_IP" ]]; then
              echo "ArgoCD External IP: $EXTERNAL_IP"
              echo "ARGOCD_SERVER=https://$EXTERNAL_IP" >> $GITHUB_ENV
              exit 0
            fi
            echo "Retrying in 10s..."
            sleep 10
          done
          echo "Failed to get ArgoCD External IP"
          exit 1

      - name: Retrieve ArgoCD Admin Password
        run: |
          ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          echo "::add-mask::$ARGOCD_PASSWORD"  # إخفاء كلمة المرور في السجلات
          echo "ARGOCD_PASSWORD=$ARGOCD_PASSWORD" >> $GITHUB_ENV

      - name: Print WebSocket URL
        run: echo "WebSocket URL is ${{ secrets.WEBSOCKET_URL }}"

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd


      - name: Authenticate with ArgoCD
        run: |
          argocd login  50.85.148.198:80  --username admin --password ${{ secrets.ARGOCD_PASSWORD }} --insecure

    
      - name: Apply ArgoCD Application
        run: |
          kubectl apply -f argocd/argocd-app.yaml -n argocd



      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
 
      - name: Sync ArgoCD Application
        run: |
          echo "Checking if another sync operation is in progress..."
          OP_STATUS=$(argocd app get websocket-app --server=${{ env.ARGOCD_SERVER }} -o json | jq -r '.status.operationState.phase')
      
          if [[ "$OP_STATUS" == "Running" ]]; then
            echo "Another sync operation is already in progress. Terminating..."
            argocd app terminate-op websocket-app --server=${{ env.ARGOCD_SERVER }}
            sleep 10  # انتظر قليلًا حتى يتم الإنهاء بالكامل
          fi
      
          echo "Starting new sync operation..."
          argocd app sync websocket-app --server=50.85.148.198 --grpc-web

