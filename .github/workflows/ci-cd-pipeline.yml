name: CI/CD Pipeline

on:
  push:
    branches:
      - main  

permissions:  
  id-token: write 
  contents: read
      
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ðŸ”¹ Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # ðŸ”¹ Build & Push to DockerHub
      - name: Build and push Docker image to DockerHub
        run: |
          docker build -t maiabdelfata7/fastapi-websocket .
          docker push maiabdelfata7/fastapi-websocket

      # ðŸ”¹ Log in to Azure Container Registry (ACR)
      - name: Log in to ACR
        run: echo ${{ secrets.ACR_PASSWORDTR }} | docker login myacrTR202.azurecr.io -u ${{ secrets.ACR_USERNAMETR }} --password-stdin

      # ðŸ”¹ Build & Push to ACR
      - name: Build and push Docker image to ACR
        run: |
          docker build -t myacrTR202.azurecr.io/fastapi-websocket:latest .
          docker push myacrTR202.azurecr.io/fastapi-websocket:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ðŸ”¹ Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      # ðŸ”¹ Azure Login
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # ðŸ”¹ Ensure Resource Group & ACR exist
      - name: Check if Resource Group & ACR exist
        run: |
          az group show --name myResourceGroupTR || az group create --name myResourceGroupTR --location "West Europe"
          az acr show --name myacrTR202 || az acr create --resource-group myResourceGroupTR --name myacrTR202 --sku Basic

      # ðŸ”¹ Terraform Init & Apply
      - name: Terraform init and apply
        working-directory: terraform
        run: |
          terraform init
          terraform apply -auto-approve -var "Subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      # ðŸ”¹ Deploy Web App on Azure App Service
      - name: Deploy Web App on Azure App Service
        run: |
          az webapp config container set \
            --name my-fastapi-websocket-app \
            --resource-group myResourceGroupTR \
            --docker-custom-image-name myacrTR202.azurecr.io/fastapi-websocket:latest \
            --docker-registry-server-url https://myacrTR202.azurecr.io \
            --docker-registry-server-user ${{ secrets.ACR_USERNAMETR }} \
            --docker-registry-server-password ${{ secrets.ACR_PASSWORDTR }}

      # ðŸ”¹ Get AKS Credentials
      - name: Get AKS Credentials
        run: az aks get-credentials --resource-group AKCHELM --name my-aks-clusterHELM

      # ðŸ”¹ Install Helm
      - name: Install Helm
        run: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      # ðŸ”¹ Log in to ACR for Helm Deployment
      - name: Log in to ACR for Helm Deployment
        run: |
          echo "${{ secrets.ACR_PASSWORDHELM }}" | docker login myacrhelm.azurecr.io -u "${{ secrets.ACR_USERNAMEHELM }}" --password-stdin

      # ðŸ”¹ Build & Push Image for Helm
      - name: Build and push Docker image to ACR (Helm)
        run: |
          docker build -t myacrhelm.azurecr.io/fastapi-websocket:latest .
          docker push myacrhelm.azurecr.io/fastapi-websocket:latest

      # ðŸ”¹ Create Kubernetes Secret for ACR
      - name: Create Kubernetes Secret for ACR
        run: |
          kubectl create secret docker-registry acr-secret \
            --namespace default \
            --docker-server=myacrhelm.azurecr.io \
            --docker-username="${{ secrets.ACR_USERNAMEHELM }}" \
            --docker-password="${{ secrets.ACR_PASSWORDHELM }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      # ðŸ”¹ Install NGINX Ingress Controller
      - name: Install NGINX Ingress Controller
        run: |
          kubectl create namespace ingress-nginx || true
          helm upgrade --install nginx-ingress ingress-nginx/ingress-nginx \
            --namespace ingress-nginx --set controller.publishService.enabled=true

      # ðŸ”¹ Deploy WebSocket App using Helm
      - name: Deploy WebSocket App using Helm
        run: |
          helm upgrade --install websocket-app ./helm \
            --namespace default \
            --set image.repository=myacrhelm.azurecr.io/fastapi-websocket \
            --set image.tag=latest \
            --set image.pullSecrets[0]=acr-secret

      # ðŸ”¹ Ensure ArgoCD is Installed
      - name: Ensure ArgoCD is Installed
        run: |
          kubectl create namespace argocd || true
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

      # ðŸ”¹ Retrieve ArgoCD Admin Password
      - name: Retrieve ArgoCD Admin Password
        run: |
          ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          echo "::add-mask::$ARGOCD_PASSWORD"  
          echo "ARGOCD_PASSWORD=$ARGOCD_PASSWORD" >> $GITHUB_ENV

      # ðŸ”¹ Install ArgoCD CLI
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd

      # ðŸ”¹ Authenticate with ArgoCD
      - name: Authenticate with ArgoCD
        run: |
          argocd login 50.85.148.198:80 --username admin --password ${{ secrets.ARGOCD_PASSWORD }} --insecure

      # ðŸ”¹ Apply ArgoCD Application
      - name: Apply ArgoCD Application
        run: |
          kubectl apply -f argocd/argocd-app.yaml -n argocd

      # ðŸ”¹ Sync ArgoCD Application
      - name: Sync ArgoCD Application
        run: |
          echo "Checking if another sync operation is in progress..."
          OP_STATUS=$(argocd app get websocket-app --server=50.85.148.198 -o json | jq -r '.status.operationState.phase')

          if [[ "$OP_STATUS" == "Running" ]]; then
            echo "Another sync operation is already in progress. Terminating..."
            argocd app terminate-op websocket-app --server=50.85.148.198
            sleep 10  
          fi

          echo "Starting new sync operation..."
          argocd app sync websocket-app --server=50.85.148.198 --grpc-web


